package com.shbestwin.followupmanager.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.shbestwin.followupmanager.model.examination.ExaminationInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table EXAMINATION_INFO.
*/
public class ExaminationInfoDao extends AbstractDao<ExaminationInfo, String> {

    public static final String TABLENAME = "EXAMINATION_INFO";

    /**
     * Properties of entity ExaminationInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ExaminationNo = new Property(0, String.class, "examinationNo", true, "EXAMINATION_NO");
        public final static Property Idcard = new Property(1, String.class, "idcard", false, "IDCARD");
        public final static Property RoutineCheckups = new Property(2, String.class, "routineCheckups", false, "ROUTINE_CHECKUPS");
        public final static Property BloodPressure = new Property(3, String.class, "bloodPressure", false, "BLOOD_PRESSURE");
        public final static Property BloodSugar = new Property(4, String.class, "bloodSugar", false, "BLOOD_SUGAR");
        public final static Property BloodFat = new Property(5, String.class, "bloodFat", false, "BLOOD_FAT");
        public final static Property BloodOxygen = new Property(6, String.class, "bloodOxygen", false, "BLOOD_OXYGEN");
        public final static Property EcgAnalysis = new Property(7, String.class, "ecgAnalysis", false, "ECG_ANALYSIS");
        public final static Property BodyComposition = new Property(8, String.class, "bodyComposition", false, "BODY_COMPOSITION");
        public final static Property PhysiqueIdentify = new Property(9, String.class, "physiqueIdentify", false, "PHYSIQUE_IDENTIFY");
        public final static Property PsychologicaAssessmentSDS = new Property(10, String.class, "psychologicaAssessmentSDS", false, "PSYCHOLOGICA_ASSESSMENT_SDS");
        public final static Property PsychologicaAssessmentSAS = new Property(11, String.class, "psychologicaAssessmentSAS", false, "PSYCHOLOGICA_ASSESSMENT_SAS");
        public final static Property PsychologicaAssessmentPSQI = new Property(12, String.class, "psychologicaAssessmentPSQI", false, "PSYCHOLOGICA_ASSESSMENT_PSQI");
        public final static Property PsychologicaAssessmentSAQ = new Property(13, String.class, "psychologicaAssessmentSAQ", false, "PSYCHOLOGICA_ASSESSMENT_SAQ");
        public final static Property PsychologicaAssessmentUCLA = new Property(14, String.class, "psychologicaAssessmentUCLA", false, "PSYCHOLOGICA_ASSESSMENT_UCLA");
        public final static Property PsychologicaAssessmentGCQ = new Property(15, String.class, "psychologicaAssessmentGCQ", false, "PSYCHOLOGICA_ASSESSMENT_GCQ");
        public final static Property PsychologicaAssessmentSCL90 = new Property(16, String.class, "psychologicaAssessmentSCL90", false, "PSYCHOLOGICA_ASSESSMENT_SCL90");
        public final static Property PsychologicaAssessmentQLSCA = new Property(17, String.class, "psychologicaAssessmentQLSCA", false, "PSYCHOLOGICA_ASSESSMENT_QLSCA");
        public final static Property AgednessSelfcare = new Property(18, String.class, "agednessSelfcare", false, "AGEDNESS_SELFCARE");
        public final static Property AgednessDepression = new Property(19, String.class, "agednessDepression", false, "AGEDNESS_DEPRESSION");
        public final static Property AgednessIntelligence = new Property(20, String.class, "agednessIntelligence", false, "AGEDNESS_INTELLIGENCE");
        public final static Property CreateTime = new Property(21, String.class, "createTime", false, "CREATE_TIME");
        public final static Property UpdateTime = new Property(22, String.class, "updateTime", false, "UPDATE_TIME");
    };


    public ExaminationInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ExaminationInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'EXAMINATION_INFO' (" + //
                "'EXAMINATION_NO' TEXT PRIMARY KEY NOT NULL ," + // 0: examinationNo
                "'IDCARD' TEXT NOT NULL ," + // 1: idcard
                "'ROUTINE_CHECKUPS' TEXT," + // 2: routineCheckups
                "'BLOOD_PRESSURE' TEXT," + // 3: bloodPressure
                "'BLOOD_SUGAR' TEXT," + // 4: bloodSugar
                "'BLOOD_FAT' TEXT," + // 5: bloodFat
                "'BLOOD_OXYGEN' TEXT," + // 6: bloodOxygen
                "'ECG_ANALYSIS' TEXT," + // 7: ecgAnalysis
                "'BODY_COMPOSITION' TEXT," + // 8: bodyComposition
                "'PHYSIQUE_IDENTIFY' TEXT," + // 9: physiqueIdentify
                "'PSYCHOLOGICA_ASSESSMENT_SDS' TEXT," + // 10: psychologicaAssessmentSDS
                "'PSYCHOLOGICA_ASSESSMENT_SAS' TEXT," + // 11: psychologicaAssessmentSAS
                "'PSYCHOLOGICA_ASSESSMENT_PSQI' TEXT," + // 12: psychologicaAssessmentPSQI
                "'PSYCHOLOGICA_ASSESSMENT_SAQ' TEXT," + // 13: psychologicaAssessmentSAQ
                "'PSYCHOLOGICA_ASSESSMENT_UCLA' TEXT," + // 14: psychologicaAssessmentUCLA
                "'PSYCHOLOGICA_ASSESSMENT_GCQ' TEXT," + // 15: psychologicaAssessmentGCQ
                "'PSYCHOLOGICA_ASSESSMENT_SCL90' TEXT," + // 16: psychologicaAssessmentSCL90
                "'PSYCHOLOGICA_ASSESSMENT_QLSCA' TEXT," + // 17: psychologicaAssessmentQLSCA
                "'AGEDNESS_SELFCARE' TEXT," + // 18: agednessSelfcare
                "'AGEDNESS_DEPRESSION' TEXT," + // 19: agednessDepression
                "'AGEDNESS_INTELLIGENCE' TEXT," + // 20: agednessIntelligence
                "'CREATE_TIME' TEXT," + // 21: createTime
                "'UPDATE_TIME' TEXT);"); // 22: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EXAMINATION_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ExaminationInfo entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getExaminationNo());
        stmt.bindString(2, entity.getIdcard());
 
        String routineCheckups = entity.getRoutineCheckups();
        if (routineCheckups != null) {
            stmt.bindString(3, routineCheckups);
        }
 
        String bloodPressure = entity.getBloodPressure();
        if (bloodPressure != null) {
            stmt.bindString(4, bloodPressure);
        }
 
        String bloodSugar = entity.getBloodSugar();
        if (bloodSugar != null) {
            stmt.bindString(5, bloodSugar);
        }
 
        String bloodFat = entity.getBloodFat();
        if (bloodFat != null) {
            stmt.bindString(6, bloodFat);
        }
 
        String bloodOxygen = entity.getBloodOxygen();
        if (bloodOxygen != null) {
            stmt.bindString(7, bloodOxygen);
        }
 
        String ecgAnalysis = entity.getEcgAnalysis();
        if (ecgAnalysis != null) {
            stmt.bindString(8, ecgAnalysis);
        }
 
        String bodyComposition = entity.getBodyComposition();
        if (bodyComposition != null) {
            stmt.bindString(9, bodyComposition);
        }
 
        String physiqueIdentify = entity.getPhysiqueIdentify();
        if (physiqueIdentify != null) {
            stmt.bindString(10, physiqueIdentify);
        }
 
        String psychologicaAssessmentSDS = entity.getPsychologicaAssessmentSDS();
        if (psychologicaAssessmentSDS != null) {
            stmt.bindString(11, psychologicaAssessmentSDS);
        }
 
        String psychologicaAssessmentSAS = entity.getPsychologicaAssessmentSAS();
        if (psychologicaAssessmentSAS != null) {
            stmt.bindString(12, psychologicaAssessmentSAS);
        }
 
        String psychologicaAssessmentPSQI = entity.getPsychologicaAssessmentPSQI();
        if (psychologicaAssessmentPSQI != null) {
            stmt.bindString(13, psychologicaAssessmentPSQI);
        }
 
        String psychologicaAssessmentSAQ = entity.getPsychologicaAssessmentSAQ();
        if (psychologicaAssessmentSAQ != null) {
            stmt.bindString(14, psychologicaAssessmentSAQ);
        }
 
        String psychologicaAssessmentUCLA = entity.getPsychologicaAssessmentUCLA();
        if (psychologicaAssessmentUCLA != null) {
            stmt.bindString(15, psychologicaAssessmentUCLA);
        }
 
        String psychologicaAssessmentGCQ = entity.getPsychologicaAssessmentGCQ();
        if (psychologicaAssessmentGCQ != null) {
            stmt.bindString(16, psychologicaAssessmentGCQ);
        }
 
        String psychologicaAssessmentSCL90 = entity.getPsychologicaAssessmentSCL90();
        if (psychologicaAssessmentSCL90 != null) {
            stmt.bindString(17, psychologicaAssessmentSCL90);
        }
 
        String psychologicaAssessmentQLSCA = entity.getPsychologicaAssessmentQLSCA();
        if (psychologicaAssessmentQLSCA != null) {
            stmt.bindString(18, psychologicaAssessmentQLSCA);
        }
 
        String agednessSelfcare = entity.getAgednessSelfcare();
        if (agednessSelfcare != null) {
            stmt.bindString(19, agednessSelfcare);
        }
 
        String agednessDepression = entity.getAgednessDepression();
        if (agednessDepression != null) {
            stmt.bindString(20, agednessDepression);
        }
 
        String agednessIntelligence = entity.getAgednessIntelligence();
        if (agednessIntelligence != null) {
            stmt.bindString(21, agednessIntelligence);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(22, createTime);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(23, updateTime);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ExaminationInfo readEntity(Cursor cursor, int offset) {
        ExaminationInfo entity = new ExaminationInfo( //
            cursor.getString(offset + 0), // examinationNo
            cursor.getString(offset + 1), // idcard
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // routineCheckups
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bloodPressure
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bloodSugar
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // bloodFat
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // bloodOxygen
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ecgAnalysis
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // bodyComposition
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // physiqueIdentify
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // psychologicaAssessmentSDS
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // psychologicaAssessmentSAS
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // psychologicaAssessmentPSQI
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // psychologicaAssessmentSAQ
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // psychologicaAssessmentUCLA
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // psychologicaAssessmentGCQ
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // psychologicaAssessmentSCL90
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // psychologicaAssessmentQLSCA
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // agednessSelfcare
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // agednessDepression
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // agednessIntelligence
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // createTime
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22) // updateTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ExaminationInfo entity, int offset) {
        entity.setExaminationNo(cursor.getString(offset + 0));
        entity.setIdcard(cursor.getString(offset + 1));
        entity.setRoutineCheckups(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBloodPressure(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBloodSugar(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBloodFat(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBloodOxygen(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEcgAnalysis(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBodyComposition(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPhysiqueIdentify(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPsychologicaAssessmentSDS(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPsychologicaAssessmentSAS(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPsychologicaAssessmentPSQI(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPsychologicaAssessmentSAQ(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPsychologicaAssessmentUCLA(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPsychologicaAssessmentGCQ(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPsychologicaAssessmentSCL90(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setPsychologicaAssessmentQLSCA(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setAgednessSelfcare(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setAgednessDepression(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setAgednessIntelligence(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setCreateTime(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setUpdateTime(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(ExaminationInfo entity, long rowId) {
        return entity.getExaminationNo();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(ExaminationInfo entity) {
        if(entity != null) {
            return entity.getExaminationNo();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
