package com.shbestwin.followupmanager.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.shbestwin.followupmanager.model.followup.FollowUpDiabetesMellitus;
import com.shbestwin.followupmanager.model.report.ReportDiabetesMellitus;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FOLLOW_UP_DIABETES_MELLITUS.
*/
public class ReportDiabetesMellitusDao extends AbstractDao<ReportDiabetesMellitus, String> {

    public static final String TABLENAME = "FOLLOW_UP_DIABETES_MELLITUS";

    /**
     * Properties of entity FollowUpDiabetesMellitus.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property FollowUpNo = new Property(0, String.class, "reportno", true, "REPORT_NO");
        public final static Property Idcard = new Property(1, String.class, "idcard", false, "IDCARD");
        public final static Property name = new Property(2, String.class, "name", false, "NAME");
        public final static Property sex = new Property(3, String.class, "sex", false, "SEX");
        public final static Property birth = new Property(4, String.class, "birth", false, "BIRTH");
        public final static Property contactor = new Property(5, String.class, "contactor", false, "CONTACTOR");
        public final static Property nation = new Property(6, String.class, "nation", false, "NATION");
        public final static Property history_number = new Property(7, String.class, "history_number", false, "HISTORY_NUMBER");
        public final static Property history_msg = new Property(8, String.class, "history_msg", false, "HISTORY_MSG");
        public final static Property report_date = new Property(9, String.class, "report_date", false, "REPORT_DATE");
        public final static Property report_unit = new Property(10, String.class, "report_unit", false, "REPORT_UNIT");
        public final static Property report_doctor = new Property(11, String.class, "report_doctor", false, "REPORT_DOCTOR");
        public final static Property check_bloodpress = new Property(12, String.class, "check_bloodpress", false, "CHECK_BLOODPRESS");
        public final static Property bloodpress_level = new Property(13, String.class, "bloodpress_level", false, "BLOODPRESS_LEVEL");
        public final static Property bloodpress_type = new Property(14, String.class, "bloodpress_type", false, "BLOODPRESS_TYPE");
        public final static Property height = new Property(15, String.class, "height", false, "HEIGHT");
        public final static Property weight = new Property(16, String.class, "weight", false, "WEIGHT");
        public final static Property pluse = new Property(17, String.class, "pluse", false, "PLUSE");
        public final static Property bloodpress = new Property(18, String.class, "bloodpress", false, "BLOODPRESS");
        public final static Property next_followup_date = new Property(19, String.class, "next_followup_date", false, "NEXT_FOLLOWUP_DATE");
        public final static Property describe = new Property(20, String.class, "describe", false, "DESCRIBE");
    };


    public ReportDiabetesMellitusDao(DaoConfig config) {
        super(config);
    }
    
    public ReportDiabetesMellitusDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FOLLOW_UP_DIABETES_MELLITUS' (" + //
                "'REPORT_NO' TEXT PRIMARY KEY NOT NULL ," +
                "'IDCARD' TEXT NOT NULL ," + 
                "'NAME' TEXT," +
                "'SEX' TEXT," +
                "'BIRTH' TEXT," + 
                "'CONTACTOR' TEXT," + 
                "'NATION' TEXT," +
                "'HISTORY_NUMBER' TEXT," + 
                "'HISTORY_MSG' TEXT," + 
                "'REPORT_DATE' TEXT," + 
                "'REPORT_UNIT' TEXT," + 
                "'REPORT_DOCTOR' TEXT," + 
                "'CHECK_BLOODPRESS' TEXT," + 
                "'BLOODPRESS_LEVEL' TEXT," + 
                "'BLOODPRESS_TYPE' TEXT," +
                "'HEIGHT' TEXT," + 
                "'WEIGHT' TEXT," +
                "'PLUSE' TEXT," + 
                "'BLOODPRESS' TEXT," + 
                "'NEXT_FOLLOWUP_DATE' TEXT," + 
                "'DESCRIBE' TEXT," +
                "'CREATE_TIME' TEXT," + 
                "'UPDATE_TIME' TEXT);"); 
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'REPORT_DIABETES_MELLITUS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ReportDiabetesMellitus entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getReportno());
        stmt.bindString(2, entity.getIdcard());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(4, sex);
        }
 
        String birth = entity.getBirth();
        if (birth != null) {
            stmt.bindString(5, birth);
        }
 
        String contactor = entity.getContactor();
        if (contactor != null) {
            stmt.bindString(6, contactor);
        }
 
        String nation = entity.getNation();
        if (nation != null) {
            stmt.bindString(7, nation);
        }
 
        String history_number = entity.getHistory_number();
        if (history_number != null) {
            stmt.bindString(8, history_number);
        }
 
        String history_msg = entity.getHistory_msg();
        if (history_msg != null) {
            stmt.bindString(9, history_msg);
        }
 
        String report_date = entity.getReport_date();
        if (report_date != null) {
            stmt.bindString(10, report_date);
        }
 
        String report_unit = entity.getReport_unit();
        if (report_unit != null) {
            stmt.bindString(11, report_unit);
        }
 
        String report_doctor = entity.getReport_doctor();
        if (report_doctor != null) {
            stmt.bindString(12, report_doctor);
        }
 
        String check_bloodpress = entity.getCheck_bloodpress();
        if (check_bloodpress != null) {
            stmt.bindString(13, check_bloodpress);
        }
        String bloodpress_level = entity.getBloodpress_level();
        if (bloodpress_level != null) {
            stmt.bindString(14, bloodpress_level);
        }
 
        String bloodpress_type = entity.getBloodpress_type();
        if (bloodpress_type != null) {
            stmt.bindString(15, bloodpress_type);
        }
 
        String height = entity.getHeight();
        if (height != null) {
            stmt.bindString(16, height);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(17, weight);
        }
 
        String pluse = entity.getPluse();
        if (pluse != null) {
            stmt.bindString(18, pluse);
        }
 
        String bloodpress = entity.getBloodpress();
        if (bloodpress != null) {
            stmt.bindString(19, bloodpress);
        }
 
        String next_followup_date = entity.getNext_followup_date();
        if (next_followup_date != null) {
            stmt.bindString(20, next_followup_date);
        }
 
        String describe = entity.getDescribe();
        if (describe != null) {
            stmt.bindString(21, describe);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(22, createTime);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(23, updateTime);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ReportDiabetesMellitus readEntity(Cursor cursor, int offset) {
    	ReportDiabetesMellitus entity = new ReportDiabetesMellitus( //
            cursor.getString(offset + 0), // followUpNo
            cursor.getString(offset + 1), // idcard
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), 
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // grxx_sfrq
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // grxx_sffs
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // zz
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // tz_xy
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // tz_xl
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // tz_tz
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // tz_sg
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // tz_tzzs
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // tz_zbdmbd
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // tz_yw
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // tz_qt
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // shzdfs_rxyl
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // shzdfs_ryjl
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // shzdfs_ydl
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // shzdfs_zs
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // shzdfs_xltz
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // shzdfs_zyxw
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // yyqk
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // yds
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22) // fzjc
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ReportDiabetesMellitus entity, int offset) {
        entity.setReportno(cursor.getString(offset + 0));
        entity.setIdcard(cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSex(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBirth(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContactor(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNation(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHistory_number(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHistory_msg(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setReport_date(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setReport_unit(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setReport_doctor(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCheck_bloodpress(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setBloodpress_level(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setBloodpress_type(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setHeight(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setWeight(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setPluse(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setBloodpress(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setNext_followup_date(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setDescribe(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setCreateTime(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 37));
        entity.setUpdateTime(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 38));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(ReportDiabetesMellitus entity, long rowId) {
        return entity.getReportno();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(ReportDiabetesMellitus entity) {
        if(entity != null) {
            return entity.getReportno();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
