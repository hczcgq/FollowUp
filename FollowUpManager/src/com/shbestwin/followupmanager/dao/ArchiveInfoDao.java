package com.shbestwin.followupmanager.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.shbestwin.followupmanager.model.ArchiveInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ARCHIVE_INFO.
*/
public class ArchiveInfoDao extends AbstractDao<ArchiveInfo, String> {

    public static final String TABLENAME = "ARCHIVE_INFO";

    /**
     * Properties of entity ArchiveInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Idcard = new Property(0, String.class, "idcard", true, "IDCARD");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property PicturePath = new Property(2, String.class, "picturePath", false, "PICTURE_PATH");
        public final static Property ArchiveNo = new Property(3, String.class, "archiveNo", false, "ARCHIVE_NO");
        public final static Property CardNo = new Property(4, String.class, "cardNo", false, "CARD_NO");
        public final static Property Gender = new Property(5, String.class, "gender", false, "GENDER");
        public final static Property Birthday = new Property(6, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Relationship = new Property(7, String.class, "relationship", false, "RELATIONSHIP");
        public final static Property WorkUnit = new Property(8, String.class, "workUnit", false, "WORK_UNIT");
        public final static Property Telephone = new Property(9, String.class, "telephone", false, "TELEPHONE");
        public final static Property Ethnic = new Property(10, String.class, "ethnic", false, "ETHNIC");
        public final static Property ContactName = new Property(11, String.class, "contactName", false, "CONTACT_NAME");
        public final static Property ContactPhone = new Property(12, String.class, "contactPhone", false, "CONTACT_PHONE");
        public final static Property Education = new Property(13, String.class, "education", false, "EDUCATION");
        public final static Property BloodType = new Property(14, String.class, "bloodType", false, "BLOOD_TYPE");
        public final static Property AccountProperty = new Property(15, String.class, "accountProperty", false, "ACCOUNT_PROPERTY");
        public final static Property Marriage = new Property(16, String.class, "marriage", false, "MARRIAGE");
        public final static Property RHNegative = new Property(17, String.class, "RHNegative", false, "RHNEGATIVE");
        public final static Property Job = new Property(18, String.class, "job", false, "JOB");
        public final static Property Nationality = new Property(19, String.class, "nationality", false, "NATIONALITY");
        public final static Property AssistType = new Property(20, String.class, "assistType", false, "ASSIST_TYPE");
        public final static Property Email = new Property(21, String.class, "email", false, "EMAIL");
        public final static Property Postcode = new Property(22, String.class, "postcode", false, "POSTCODE");
        public final static Property FamilyAddress = new Property(23, String.class, "familyAddress", false, "FAMILY_ADDRESS");
        public final static Property ResidentType = new Property(24, String.class, "residentType", false, "RESIDENT_TYPE");
        public final static Property ResidentAddress = new Property(25, String.class, "residentAddress", false, "RESIDENT_ADDRESS");
        public final static Property CertificateType = new Property(26, String.class, "certificateType", false, "CERTIFICATE_TYPE");
        public final static Property NegativeEvent = new Property(27, String.class, "negativeEvent", false, "NEGATIVE_EVENT");
        public final static Property ManagerUnit = new Property(28, String.class, "managerUnit", false, "MANAGER_UNIT");
        public final static Property CreateDate = new Property(29, String.class, "createDate", false, "CREATE_DATE");
        public final static Property CategoryName = new Property(30, String.class, "categoryName", false, "CATEGORY_NAME");
        public final static Property CategoryNum = new Property(31, String.class, "categoryNum", false, "CATEGORY_NUM");
        public final static Property InsuranceNo = new Property(32, String.class, "insuranceNo", false, "INSURANCE_NO");
        public final static Property SignUpDate = new Property(33, String.class, "signUpDate", false, "SIGN_UP_DATE");
        public final static Property ExposureHistories = new Property(34, String.class, "exposureHistories", false, "EXPOSURE_HISTORIES");
        public final static Property AllergyHistories = new Property(35, String.class, "allergyHistories", false, "ALLERGY_HISTORIES");
        public final static Property FamliyHistories = new Property(36, String.class, "famliyHistories", false, "FAMLIY_HISTORIES");
        public final static Property PastHistories = new Property(37, String.class, "pastHistories", false, "PAST_HISTORIES");
        public final static Property SyntrophusHistories = new Property(38, String.class, "syntrophusHistories", false, "SYNTROPHUS_HISTORIES");
        public final static Property BearHistories = new Property(39, String.class, "bearHistories", false, "BEAR_HISTORIES");
        public final static Property MensesHistories = new Property(40, String.class, "mensesHistories", false, "MENSES_HISTORIES");
        public final static Property Disabilityies = new Property(41, String.class, "disabilityies", false, "DISABILITYIES");
        public final static Property FamilyInfo = new Property(42, String.class, "familyInfo", false, "FAMILY_INFO");
        public final static Property FamilyMermber = new Property(43, String.class, "familyMermber", false, "FAMILY_MERMBER");
        public final static Property FamilyProblem = new Property(44, String.class, "familyProblem", false, "FAMILY_PROBLEM");
        public final static Property Environment = new Property(45, String.class, "environment", false, "ENVIRONMENT");
    };


    public ArchiveInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ArchiveInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ARCHIVE_INFO' (" + //
                "'IDCARD' TEXT PRIMARY KEY NOT NULL ," + // 0: idcard
                "'NAME' TEXT NOT NULL ," + // 1: name
                "'PICTURE_PATH' TEXT," + // 2: picturePath
                "'ARCHIVE_NO' TEXT," + // 3: archiveNo
                "'CARD_NO' TEXT," + // 4: cardNo
                "'GENDER' TEXT," + // 5: gender
                "'BIRTHDAY' TEXT NOT NULL ," + // 6: birthday
                "'RELATIONSHIP' TEXT," + // 7: relationship
                "'WORK_UNIT' TEXT NOT NULL ," + // 8: workUnit
                "'TELEPHONE' TEXT NOT NULL ," + // 9: telephone
                "'ETHNIC' TEXT," + // 10: ethnic
                "'CONTACT_NAME' TEXT," + // 11: contactName
                "'CONTACT_PHONE' TEXT," + // 12: contactPhone
                "'EDUCATION' TEXT," + // 13: education
                "'BLOOD_TYPE' TEXT," + // 14: bloodType
                "'ACCOUNT_PROPERTY' TEXT," + // 15: accountProperty
                "'MARRIAGE' TEXT," + // 16: marriage
                "'RHNEGATIVE' TEXT," + // 17: RHNegative
                "'JOB' TEXT," + // 18: job
                "'NATIONALITY' TEXT," + // 19: nationality
                "'ASSIST_TYPE' TEXT," + // 20: assistType
                "'EMAIL' TEXT," + // 21: email
                "'POSTCODE' TEXT," + // 22: postcode
                "'FAMILY_ADDRESS' TEXT NOT NULL ," + // 23: familyAddress
                "'RESIDENT_TYPE' TEXT," + // 24: residentType
                "'RESIDENT_ADDRESS' TEXT," + // 25: residentAddress
                "'CERTIFICATE_TYPE' TEXT," + // 26: certificateType
                "'NEGATIVE_EVENT' TEXT," + // 27: negativeEvent
                "'MANAGER_UNIT' TEXT," + // 28: managerUnit
                "'CREATE_DATE' TEXT," + // 29: createDate
                "'CATEGORY_NAME' TEXT," + // 30: categoryName
                "'CATEGORY_NUM' TEXT," + // 31: categoryNum
                "'INSURANCE_NO' TEXT," + // 32: insuranceNo
                "'SIGN_UP_DATE' TEXT," + // 33: signUpDate
                "'EXPOSURE_HISTORIES' TEXT," + // 34: exposureHistories
                "'ALLERGY_HISTORIES' TEXT," + // 35: allergyHistories
                "'FAMLIY_HISTORIES' TEXT," + // 36: famliyHistories
                "'PAST_HISTORIES' TEXT," + // 37: pastHistories
                "'SYNTROPHUS_HISTORIES' TEXT," + // 38: syntrophusHistories
                "'BEAR_HISTORIES' TEXT," + // 39: bearHistories
                "'MENSES_HISTORIES' TEXT," + // 40: mensesHistories
                "'DISABILITYIES' TEXT," + // 41: disabilityies
                "'FAMILY_INFO' TEXT," + // 42: familyInfo
                "'FAMILY_MERMBER' TEXT," + // 43: familyMermber
                "'FAMILY_PROBLEM' TEXT," + // 44: familyProblem
                "'ENVIRONMENT' TEXT);"); // 45: environment
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ARCHIVE_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ArchiveInfo entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getIdcard());
        stmt.bindString(2, entity.getName());
 
        String picturePath = entity.getPicturePath();
        if (picturePath != null) {
            stmt.bindString(3, picturePath);
        }
        
        String archiveNo = entity.getArchiveNo();
        if (archiveNo != null) {
        	stmt.bindString(4, archiveNo);
        }
 
        String cardNo = entity.getCardNo();
        if (cardNo != null) {
            stmt.bindString(5, cardNo);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(6, gender);
        }
        stmt.bindString(7, entity.getBirthday());
 
        String relationship = entity.getRelationship();
        if (relationship != null) {
            stmt.bindString(8, relationship);
        }
        stmt.bindString(9, entity.getWorkUnit());
        stmt.bindString(10, entity.getTelephone());
 
        String ethnic = entity.getEthnic();
        if (ethnic != null) {
            stmt.bindString(11, ethnic);
        }
 
        String contactName = entity.getContactName();
        if (contactName != null) {
            stmt.bindString(12, contactName);
        }
 
        String contactPhone = entity.getContactPhone();
        if (contactPhone != null) {
            stmt.bindString(13, contactPhone);
        }
 
        String education = entity.getEducation();
        if (education != null) {
            stmt.bindString(14, education);
        }
 
        String bloodType = entity.getBloodType();
        if (bloodType != null) {
            stmt.bindString(15, bloodType);
        }
 
        String accountProperty = entity.getAccountProperty();
        if (accountProperty != null) {
            stmt.bindString(16, accountProperty);
        }
 
        String marriage = entity.getMarriage();
        if (marriage != null) {
            stmt.bindString(17, marriage);
        }
 
        String RHNegative = entity.getRHNegative();
        if (RHNegative != null) {
            stmt.bindString(18, RHNegative);
        }
 
        String job = entity.getJob();
        if (job != null) {
            stmt.bindString(19, job);
        }
 
        String nationality = entity.getNationality();
        if (nationality != null) {
            stmt.bindString(20, nationality);
        }
 
        String assistType = entity.getAssistType();
        if (assistType != null) {
            stmt.bindString(21, assistType);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(22, email);
        }
 
        String postcode = entity.getPostcode();
        if (postcode != null) {
            stmt.bindString(23, postcode);
        }
        stmt.bindString(24, entity.getFamilyAddress());
 
        String residentType = entity.getResidentType();
        if (residentType != null) {
            stmt.bindString(25, residentType);
        }
 
        String residentAddress = entity.getResidentAddress();
        if (residentAddress != null) {
            stmt.bindString(26, residentAddress);
        }
 
        String certificateType = entity.getCertificateType();
        if (certificateType != null) {
            stmt.bindString(27, certificateType);
        }
 
        String negativeEvent = entity.getNegativeEvent();
        if (negativeEvent != null) {
            stmt.bindString(28, negativeEvent);
        }
 
        String managerUnit = entity.getManagerUnit();
        if (managerUnit != null) {
            stmt.bindString(29, managerUnit);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(30, createDate);
        }
 
        String categoryName = entity.getCategoryName();
        if (categoryName != null) {
            stmt.bindString(31, categoryName);
        }
 
        String categoryNum = entity.getCategoryNum();
        if (categoryNum != null) {
            stmt.bindString(32, categoryNum);
        }
 
        String insuranceNo = entity.getInsuranceNo();
        if (insuranceNo != null) {
            stmt.bindString(33, insuranceNo);
        }
 
        String signUpDate = entity.getSignUpDate();
        if (signUpDate != null) {
            stmt.bindString(34, signUpDate);
        }
 
        String exposureHistories = entity.getExposureHistories();
        if (exposureHistories != null) {
            stmt.bindString(35, exposureHistories);
        }
 
        String allergyHistories = entity.getAllergyHistories();
        if (allergyHistories != null) {
            stmt.bindString(36, allergyHistories);
        }
 
        String famliyHistories = entity.getFamliyHistories();
        if (famliyHistories != null) {
            stmt.bindString(37, famliyHistories);
        }
 
        String pastHistories = entity.getPastHistories();
        if (pastHistories != null) {
            stmt.bindString(38, pastHistories);
        }
 
        String syntrophusHistories = entity.getSyntrophusHistories();
        if (syntrophusHistories != null) {
            stmt.bindString(39, syntrophusHistories);
        }
 
        String bearHistories = entity.getBearHistories();
        if (bearHistories != null) {
            stmt.bindString(40, bearHistories);
        }
 
        String mensesHistories = entity.getMensesHistories();
        if (mensesHistories != null) {
            stmt.bindString(41, mensesHistories);
        }
 
        String disabilityies = entity.getDisabilityies();
        if (disabilityies != null) {
            stmt.bindString(42, disabilityies);
        }
 
        String familyInfo = entity.getFamilyInfo();
        if (familyInfo != null) {
            stmt.bindString(43, familyInfo);
        }
 
        String familyMermber = entity.getFamilyMermber();
        if (familyMermber != null) {
            stmt.bindString(44, familyMermber);
        }
 
        String familyProblem = entity.getFamilyProblem();
        if (familyProblem != null) {
            stmt.bindString(45, familyProblem);
        }
 
        String environment = entity.getEnvironment();
        if (environment != null) {
            stmt.bindString(46, environment);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ArchiveInfo readEntity(Cursor cursor, int offset) {
        ArchiveInfo entity = new ArchiveInfo( //
            cursor.getString(offset + 0), // idcard
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // picturePath
            cursor.getString(offset + 3), // archiveNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cardNo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // gender
            cursor.getString(offset + 6), // birthday
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // relationship
            cursor.getString(offset + 8), // workUnit
            cursor.getString(offset + 9), // telephone
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ethnic
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // contactName
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // contactPhone
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // education
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // bloodType
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // accountProperty
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // marriage
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // RHNegative
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // job
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // nationality
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // assistType
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // email
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // postcode
            cursor.getString(offset + 23), // familyAddress
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // residentType
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // residentAddress
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // certificateType
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // negativeEvent
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // managerUnit
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // createDate
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // categoryName
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // categoryNum
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // insuranceNo
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // signUpDate
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // exposureHistories
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // allergyHistories
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // famliyHistories
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // pastHistories
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // syntrophusHistories
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // bearHistories
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // mensesHistories
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // disabilityies
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // familyInfo
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // familyMermber
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // familyProblem
            cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45) // environment
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ArchiveInfo entity, int offset) {
        entity.setIdcard(cursor.getString(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setPicturePath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setArchiveNo(cursor.getString(offset + 3));
        entity.setCardNo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGender(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBirthday(cursor.getString(offset + 6));
        entity.setRelationship(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setWorkUnit(cursor.getString(offset + 8));
        entity.setTelephone(cursor.getString(offset + 9));
        entity.setEthnic(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setContactName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setContactPhone(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setEducation(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setBloodType(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setAccountProperty(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setMarriage(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setRHNegative(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setJob(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setNationality(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setAssistType(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setEmail(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setPostcode(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setFamilyAddress(cursor.getString(offset + 23));
        entity.setResidentType(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setResidentAddress(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setCertificateType(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setNegativeEvent(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setManagerUnit(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setCreateDate(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setCategoryName(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setCategoryNum(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setInsuranceNo(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setSignUpDate(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setExposureHistories(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setAllergyHistories(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setFamliyHistories(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setPastHistories(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setSyntrophusHistories(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setBearHistories(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setMensesHistories(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setDisabilityies(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setFamilyInfo(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setFamilyMermber(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setFamilyProblem(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setEnvironment(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(ArchiveInfo entity, long rowId) {
        return entity.getIdcard();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(ArchiveInfo entity) {
        if(entity != null) {
            return entity.getIdcard();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
