import com.shbestwin.followupmanager.common.util.HexBinary;



public class Test8 {
	public static void main(String[] args) {
		// 长度=510
		// AA(0) :
		// 03(1) :(0x03=结构体，0x04=数组)

		// 01(2) :第几条心电数据低8bit
		// 00(3) :第几条心电数据高8bit

		// 1E(4) :本条数据有多少数据包低8bit
		// 00(5) :本条数据有多少数据包高8bit

		// 01(6) :本次是第几个数据包低8bit
		// 00(7) :本次是第几个数据包高8bit

		// F4(8) :本次数据传输长度length低8bit
		// 01(9) :本次数据传输长度length高8bit

		// 0F 01 1E 17 12 36 83 31 11 00 01 00 00 00 76 02 05 00 62 00 F8 00 E6
		// FF 50 00 23 00 00 40 1E 64 00 00 00 00 00 00 00 00 00 00 00 00 00 00
		// 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
		// 00 00 00 00 00 00 00 01 00 F6 FF 8F 00 00 00 4B 08 41 08 8F 00 91 02
		// 5A 00 B1 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
		// 00 00 00 00 00 02 00 F6 FF 20 03 00 00 92 01 86 FE 91 02 84 01 D9 FF
		// 69 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
		// 00 00 00 03 00 F6 FF A4 04 00 00 36 08 CB 00 84 01 E7 02 E5 FF 98 04
		// 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
		// 00 04 00 F6 FF 8B 07 00 00 BB 07 38 00 E7 02 58 01 84 02 F3 04 00 00
		// 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05
		// 00 F6 FF E3 08 00 00 D0 FD 9D FE 58 01 A0 03 D1 FF 81 02 00 00 00 00
		// 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 06 00 F6
		// FF 83 0C 00 00 32 07 84 00 A0 03 72 00 FB FF 41 05 00 00 00 00 00 00
		// 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 07 00 F6 FF F5
		// 0C 00 00 8C 00 5F 06 72 00 7E 02 70 FD 6B 01 00 00 00 00 00 00 00 00
		// 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 08 00 F6 FF 73 0F 00
		// 00 F0 02 D4 02 7E 02 41 00 E0 FE D8 00 00 00 00 00 00 00 00 00 00 00
		// 00 00 00 00 00 00 00 00 00 00 00 00 00 00 09 00 F7 FF B4 0F 00 00 3E
		// 00 45 01 41 00 21 01 F9 FE 5A 00 00 00 00 00 00 00 3A 00 00 00 00 00
		// 00 00 00 00 00 00 00 00 00 00 00 00 0A 00 F7 FF D5 10 00 00 46 09 E0
		// 09 21 01 2F 01 66 FF 34 01 00 00 00 00 00 00 00 00

		String str = "AA 03 01 00 1E 00 01 00 F4 01 0F 01 1E 17 0F 36 83 31 0B 00 01 00 00 00 94 02 05 00 62 00 F8 00 E6 FF 50 00 23 00 00 40 1E 64 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 F6 FF 08 01 00 00 E6 07 41 08 08 01 3A 0D 5A 00 B1 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 F6 FF 42 0E 00 00 7F FE 86 FE 3A 0D 70 00 D9 FF 69 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 F7 FF B2 0E 00 00 B0 00 CB 00 70 00 C8 00 E5 FF 98 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 F6 FF 7A 0F 00 00 16 02 38 00 C8 00 26 00 84 02 F3 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 F6 FF A0 0F 00 00 00 03 9D FE 26 00 81 00 D1 FF 81 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 06 00 F7 FF 21 10 00 00 7F 00 84 00 81 00 7F 00 FB FF 41 05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 07 00 F7 FF A0 10 00 00 BF 00 6C 02 7F 00 AF 01 53 FE F1 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 08 00 F7 FF 4F 12 00 00 B4 01 D4 02 AF 01 53 00 E0 FE D8 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 09 00 FF FF A3 12 00 00 56 01 F6 02 53 00 FF 01 60 FE 17 00 00 00 00 00 00 00 3A 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0A 00 F6 FF A2 14 00 00 D6 03 E8 00 59 00 1F 00 CB FF 66 00 00 00 00 00 00 00 00 00";
		byte[] bytes = HexBinary.encode(str.replaceAll(" ", ""));
		System.out.println(bytes.length);
		//index=1,packageCount=30,packageIndex=1,length=500
		short index = getShort(bytes, 2);//第几条心电数据(1)
		short packageCount = getShort(bytes, 4);//本条数据有多少数据包(30)
		short packageIndex = getShort(bytes, 6);//本次是第几个数据包(1)
		short length = getShort(bytes, 8);//本次数据传输长度(500)
		System.out.println("index=" + index + ",packageCount=" + packageCount + ",packageIndex=" + packageIndex + ",length=" + length);
	}

	/**
	 * 转换short为byte
	 * 
	 * @param s
	 *            需要转换的short
	 * @param index
	 */
	public static byte[] putShort(short s, int index) {
		byte[] b = new byte[2];
		b[index + 1] = (byte) (s >> 8);
		b[index + 0] = (byte) (s >> 0);
		return b;
	}

	/**
	 * 通过byte数组取到short
	 * 
	 * @param b
	 * @param index
	 *            第几位开始取
	 * @return
	 */
	public static short getShort(byte[] b, int index) {
		return (short) (((b[index + 1] << 8) | b[index + 0] & 0xff));
	}

	public static int getInt(byte b) {
		return b & 0xff;
	}
}
